import numpy
import numpy.typing
import typing
from typing import ClassVar

CD: IntegratorType
EULER: IntegratorType
EULER_CROMER: IntegratorType
MIDPOINT: IntegratorType
RUNGE_KUTTA_4: IntegratorType

class IntegratorType:
    __members__: ClassVar[dict] = ...  # read-only
    CD: ClassVar[IntegratorType] = ...
    EULER: ClassVar[IntegratorType] = ...
    EULER_CROMER: ClassVar[IntegratorType] = ...
    MIDPOINT: ClassVar[IntegratorType] = ...
    RUNGE_KUTTA_4: ClassVar[IntegratorType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: typing.SupportsInt) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class SimulationCPU:
    def __init__(self, dt: typing.SupportsFloat, init, params: typing.Annotated[numpy.typing.ArrayLike, numpy.float32]) -> None: ...
    def compileCode(self, userCode: str) -> None: ...
    def createOneDimBifurcationDiagram(self, steps: typing.SupportsInt, method: IntegratorType, parameter_idx: typing.SupportsInt, point_component_idx: typing.SupportsInt, num_of_constants: typing.SupportsInt, min_value: typing.SupportsFloat, max_value: typing.SupportsFloat, delta_value: typing.SupportsFloat, num_transition_points: typing.SupportsInt) -> numpy.ndarray: ...
    def runSimulation(self, steps: typing.SupportsInt, method: IntegratorType) -> numpy.ndarray: ...
